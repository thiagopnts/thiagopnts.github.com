---
layout: post
title: Patterns of Enterprise Application Architecture - Mapping to Relational Databases
---

<img src="http://ecx.images-amazon.com/images/I/511D6FdsbXL._AA160_.jpg" width="250" height="250" />

##Chapter 3 - Mapping to Relational Databases

I particularly liked this chapter more then others, not because of the patterns described in this section(there is a lot of them) but how it describes the how and why there are some problems with creating/using an ORM, while reading this chapter you can identify several patterns cited through the text and think like 'wow, the way hibernate/activerecord/blah approachs data manipulation is a pattern called X' and see the work arounds it does to deal with common object oriented practices like inheritance that mess up and are unviable to simulate/map in relational databases due normalization. This chapter also gave me a more deep view about relational databases, since my experience is most with the nosql ones, since I always have avoided sql and its third party functions(which I always forget) as much as I can. So for this chapter I will focus on the problems(and its alternatives) for this layer.

##The Behavioral Problem

When we think in OR mapping the first thing that comes to mind is how the classes are mapped to tables and how to relate it. If you load several objects in the memory and modify them you hae to keep track of which ones you have modified and make sure to write all of them back out to the database, this gets more and more harder when dealing with several objects, as you read and modify them you have to ensure that the database state you're working stays consistent, so if the object X is already in memory you can't pull out the same row again and modify it. The pattern used to solve this problem is called 'Unit of Work'. It keeps track of all objects read from the database together, it also handles how updates are made to the database, instead of the programmer call some save method it tells the unit of work to commit the changes(it remember me hibernate). This pattern also takes care about the problem of loading the same row twice, each time you read some data, you check if this data are already in the memory, to help with this task there is another pattern called 'Identity Map', it's to ensure the uniqueness from data in memory and should not be used as cache or to improve performance, but this approach leads to other problem, in the OOP it's normal to have have several objects which interacts with others, this interaction can be called object graph and as the models complexity grows the graph grows as well and when you try to pull this from the database what comes to you is a bunch of joined tables, which can turn in a bottle neck in the system, so there is another approach when it becomes a problem: The Lazy Load pattern. It is a object that doesn't have all the data, but knows how to get it if you need just keeping references, it acts like a pointer, so it avoid loading unnecessary data in the memory.

##Mapping Relationships

The biggest problem here is how objects and relations handle links, which lead to two problems, the first is that there is a difference in representation, objects handle links by storing references that are held by, for instance, memory addresses, but relational databases handle links by forming a key in another table. The second problem is that objects can easily use collections to handle multiple references from a single field, while normalization forces all relation links to be single valued, this leads to reversals of the data structure between objects and tables. If an object has a collection, you need a query to find all the rows that link to the id of the object and it gets worse when you have to add or remove from collections. The pattern used for inter-object references is the 'Identity Field', which is simply keep the row's primary key as an attribute in the object, so you can easily access it's row.

##Inheritance

This is another kind of hierarchy scheme that causes relational databases headaches, since there is no standard way to do inheritance in SQL this kind of relationship needs to be mapped too. For any inheritance structure there are basically three options. You can have one table for all the classes(Single Table Inheritance pattern), one table for each concrete class(Concrete Table Inheritance pattern), or one table per class in the inheritance hierarchy(Class Table Inheritance pattern). The trade-offs of this approachs are all related to data duplication and speed of access. In the first case the biggest downside is the wasted space, since each row has to have columns for all possible subtypes and this leads to empty columns. The second one avoids the joins allowing you to pull an object from one table, but if one super class changes you have to remember to update all the other tables which inherits from it. The third one is the simplest solution, but it needs multiple joins to load a single object, and too many joins reduces performance. There is no best solution here, you have to analyze your situation and pick the best fit.

I still want to talk about Metadata, DB Connections and other interesting points from this chapter, so I will split this post in two and talk about this in the next one.
